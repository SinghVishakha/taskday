#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1022
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace taskday
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="KopalTraining")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBA(BA instance);
    partial void UpdateBA(BA instance);
    partial void DeleteBA(BA instance);
    partial void InsertQA(QA instance);
    partial void UpdateQA(QA instance);
    partial void DeleteQA(QA instance);
    partial void InsertDev(Dev instance);
    partial void UpdateDev(Dev instance);
    partial void DeleteDev(Dev instance);
    partial void InsertTeamPassword(TeamPassword instance);
    partial void UpdateTeamPassword(TeamPassword instance);
    partial void DeleteTeamPassword(TeamPassword instance);
    partial void InsertProject(Project instance);
    partial void UpdateProject(Project instance);
    partial void DeleteProject(Project instance);
    partial void InsertTeam(Team instance);
    partial void UpdateTeam(Team instance);
    partial void DeleteTeam(Team instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::taskday.Properties.Settings.Default.KopalTrainingConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<BA> BAs
		{
			get
			{
				return this.GetTable<BA>();
			}
		}
		
		public System.Data.Linq.Table<QA> QAs
		{
			get
			{
				return this.GetTable<QA>();
			}
		}
		
		public System.Data.Linq.Table<Dev> Devs
		{
			get
			{
				return this.GetTable<Dev>();
			}
		}
		
		public System.Data.Linq.Table<TeamPassword> TeamPasswords
		{
			get
			{
				return this.GetTable<TeamPassword>();
			}
		}
		
		public System.Data.Linq.Table<Project> Projects
		{
			get
			{
				return this.GetTable<Project>();
			}
		}
		
		public System.Data.Linq.Table<Team> Teams
		{
			get
			{
				return this.GetTable<Team>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.findCompleted")]
		public ISingleResult<findCompletedResult> findCompleted()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<findCompletedResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.findOngoing")]
		public ISingleResult<findOngoingResult> findOngoing()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<findOngoingResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.findPending")]
		public ISingleResult<findPendingResult> findPending()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<findPendingResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.CheckFreeTeams")]
		public ISingleResult<CheckFreeTeamsResult> CheckFreeTeams([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ProjectName", DbType="VarChar(5000)")] string projectName, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Date")] System.Nullable<System.DateTime> startDate, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Date")] System.Nullable<System.DateTime> endDate)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), projectName, startDate, endDate);
			return ((ISingleResult<CheckFreeTeamsResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ViewAllTeams")]
		public ISingleResult<ViewAllTeamsResult> ViewAllTeams()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<ViewAllTeamsResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ViewAvailableTeams")]
		public ISingleResult<ViewAvailableTeamsResult> ViewAvailableTeams()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<ViewAvailableTeamsResult>)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BA")]
	public partial class BA : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _empId;
		
		private string _empName;
		
		private int _teamId;
		
		private EntityRef<Team> _Team;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnempIdChanging(int value);
    partial void OnempIdChanged();
    partial void OnempNameChanging(string value);
    partial void OnempNameChanged();
    partial void OnteamIdChanging(int value);
    partial void OnteamIdChanged();
    #endregion
		
		public BA()
		{
			this._Team = default(EntityRef<Team>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_empId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int empId
		{
			get
			{
				return this._empId;
			}
			set
			{
				if ((this._empId != value))
				{
					this.OnempIdChanging(value);
					this.SendPropertyChanging();
					this._empId = value;
					this.SendPropertyChanged("empId");
					this.OnempIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_empName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string empName
		{
			get
			{
				return this._empName;
			}
			set
			{
				if ((this._empName != value))
				{
					this.OnempNameChanging(value);
					this.SendPropertyChanging();
					this._empName = value;
					this.SendPropertyChanged("empName");
					this.OnempNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teamId", DbType="Int NOT NULL")]
		public int teamId
		{
			get
			{
				return this._teamId;
			}
			set
			{
				if ((this._teamId != value))
				{
					if (this._Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnteamIdChanging(value);
					this.SendPropertyChanging();
					this._teamId = value;
					this.SendPropertyChanged("teamId");
					this.OnteamIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_BA", Storage="_Team", ThisKey="teamId", OtherKey="teamId", IsForeignKey=true)]
		public Team Team
		{
			get
			{
				return this._Team.Entity;
			}
			set
			{
				Team previousValue = this._Team.Entity;
				if (((previousValue != value) 
							|| (this._Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team.Entity = null;
						previousValue.BAs.Remove(this);
					}
					this._Team.Entity = value;
					if ((value != null))
					{
						value.BAs.Add(this);
						this._teamId = value.teamId;
					}
					else
					{
						this._teamId = default(int);
					}
					this.SendPropertyChanged("Team");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.QA")]
	public partial class QA : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _empId;
		
		private string _empName;
		
		private int _teamId;
		
		private EntityRef<Team> _Team;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnempIdChanging(int value);
    partial void OnempIdChanged();
    partial void OnempNameChanging(string value);
    partial void OnempNameChanged();
    partial void OnteamIdChanging(int value);
    partial void OnteamIdChanged();
    #endregion
		
		public QA()
		{
			this._Team = default(EntityRef<Team>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_empId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int empId
		{
			get
			{
				return this._empId;
			}
			set
			{
				if ((this._empId != value))
				{
					this.OnempIdChanging(value);
					this.SendPropertyChanging();
					this._empId = value;
					this.SendPropertyChanged("empId");
					this.OnempIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_empName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string empName
		{
			get
			{
				return this._empName;
			}
			set
			{
				if ((this._empName != value))
				{
					this.OnempNameChanging(value);
					this.SendPropertyChanging();
					this._empName = value;
					this.SendPropertyChanged("empName");
					this.OnempNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teamId", DbType="Int NOT NULL")]
		public int teamId
		{
			get
			{
				return this._teamId;
			}
			set
			{
				if ((this._teamId != value))
				{
					if (this._Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnteamIdChanging(value);
					this.SendPropertyChanging();
					this._teamId = value;
					this.SendPropertyChanged("teamId");
					this.OnteamIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_QA", Storage="_Team", ThisKey="teamId", OtherKey="teamId", IsForeignKey=true)]
		public Team Team
		{
			get
			{
				return this._Team.Entity;
			}
			set
			{
				Team previousValue = this._Team.Entity;
				if (((previousValue != value) 
							|| (this._Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team.Entity = null;
						previousValue.QAs.Remove(this);
					}
					this._Team.Entity = value;
					if ((value != null))
					{
						value.QAs.Add(this);
						this._teamId = value.teamId;
					}
					else
					{
						this._teamId = default(int);
					}
					this.SendPropertyChanged("Team");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Devs")]
	public partial class Dev : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _empId;
		
		private string _empName;
		
		private int _teamId;
		
		private EntityRef<Team> _Team;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnempIdChanging(int value);
    partial void OnempIdChanged();
    partial void OnempNameChanging(string value);
    partial void OnempNameChanged();
    partial void OnteamIdChanging(int value);
    partial void OnteamIdChanged();
    #endregion
		
		public Dev()
		{
			this._Team = default(EntityRef<Team>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_empId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int empId
		{
			get
			{
				return this._empId;
			}
			set
			{
				if ((this._empId != value))
				{
					this.OnempIdChanging(value);
					this.SendPropertyChanging();
					this._empId = value;
					this.SendPropertyChanged("empId");
					this.OnempIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_empName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string empName
		{
			get
			{
				return this._empName;
			}
			set
			{
				if ((this._empName != value))
				{
					this.OnempNameChanging(value);
					this.SendPropertyChanging();
					this._empName = value;
					this.SendPropertyChanged("empName");
					this.OnempNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teamId", DbType="Int NOT NULL")]
		public int teamId
		{
			get
			{
				return this._teamId;
			}
			set
			{
				if ((this._teamId != value))
				{
					if (this._Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnteamIdChanging(value);
					this.SendPropertyChanging();
					this._teamId = value;
					this.SendPropertyChanged("teamId");
					this.OnteamIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Dev", Storage="_Team", ThisKey="teamId", OtherKey="teamId", IsForeignKey=true)]
		public Team Team
		{
			get
			{
				return this._Team.Entity;
			}
			set
			{
				Team previousValue = this._Team.Entity;
				if (((previousValue != value) 
							|| (this._Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team.Entity = null;
						previousValue.Devs.Remove(this);
					}
					this._Team.Entity = value;
					if ((value != null))
					{
						value.Devs.Add(this);
						this._teamId = value.teamId;
					}
					else
					{
						this._teamId = default(int);
					}
					this.SendPropertyChanged("Team");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TeamPassword")]
	public partial class TeamPassword : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _teamId;
		
		private string _Passwd;
		
		private EntityRef<Team> _Team;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnteamIdChanging(int value);
    partial void OnteamIdChanged();
    partial void OnPasswdChanging(string value);
    partial void OnPasswdChanged();
    #endregion
		
		public TeamPassword()
		{
			this._Team = default(EntityRef<Team>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teamId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int teamId
		{
			get
			{
				return this._teamId;
			}
			set
			{
				if ((this._teamId != value))
				{
					if (this._Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnteamIdChanging(value);
					this.SendPropertyChanging();
					this._teamId = value;
					this.SendPropertyChanged("teamId");
					this.OnteamIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Passwd", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Passwd
		{
			get
			{
				return this._Passwd;
			}
			set
			{
				if ((this._Passwd != value))
				{
					this.OnPasswdChanging(value);
					this.SendPropertyChanging();
					this._Passwd = value;
					this.SendPropertyChanged("Passwd");
					this.OnPasswdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_TeamPassword", Storage="_Team", ThisKey="teamId", OtherKey="teamId", IsForeignKey=true)]
		public Team Team
		{
			get
			{
				return this._Team.Entity;
			}
			set
			{
				Team previousValue = this._Team.Entity;
				if (((previousValue != value) 
							|| (this._Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team.Entity = null;
						previousValue.TeamPassword = null;
					}
					this._Team.Entity = value;
					if ((value != null))
					{
						value.TeamPassword = this;
						this._teamId = value.teamId;
					}
					else
					{
						this._teamId = default(int);
					}
					this.SendPropertyChanged("Team");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Project")]
	public partial class Project : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _projectId;
		
		private System.Nullable<int> _teamId;
		
		private string _projectName;
		
		private string _status;
		
		private System.Nullable<System.DateTime> _startDate;
		
		private System.Nullable<System.DateTime> _endDate;
		
		private string _report;
		
		private EntityRef<Team> _Team;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnprojectIdChanging(int value);
    partial void OnprojectIdChanged();
    partial void OnteamIdChanging(System.Nullable<int> value);
    partial void OnteamIdChanged();
    partial void OnprojectNameChanging(string value);
    partial void OnprojectNameChanged();
    partial void OnstatusChanging(string value);
    partial void OnstatusChanged();
    partial void OnstartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnstartDateChanged();
    partial void OnendDateChanging(System.Nullable<System.DateTime> value);
    partial void OnendDateChanged();
    partial void OnreportChanging(string value);
    partial void OnreportChanged();
    #endregion
		
		public Project()
		{
			this._Team = default(EntityRef<Team>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_projectId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int projectId
		{
			get
			{
				return this._projectId;
			}
			set
			{
				if ((this._projectId != value))
				{
					this.OnprojectIdChanging(value);
					this.SendPropertyChanging();
					this._projectId = value;
					this.SendPropertyChanged("projectId");
					this.OnprojectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teamId", DbType="Int")]
		public System.Nullable<int> teamId
		{
			get
			{
				return this._teamId;
			}
			set
			{
				if ((this._teamId != value))
				{
					if (this._Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnteamIdChanging(value);
					this.SendPropertyChanging();
					this._teamId = value;
					this.SendPropertyChanged("teamId");
					this.OnteamIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_projectName", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string projectName
		{
			get
			{
				return this._projectName;
			}
			set
			{
				if ((this._projectName != value))
				{
					this.OnprojectNameChanging(value);
					this.SendPropertyChanging();
					this._projectName = value;
					this.SendPropertyChanged("projectName");
					this.OnprojectNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="VarChar(30)")]
		public string status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_startDate", DbType="Date")]
		public System.Nullable<System.DateTime> startDate
		{
			get
			{
				return this._startDate;
			}
			set
			{
				if ((this._startDate != value))
				{
					this.OnstartDateChanging(value);
					this.SendPropertyChanging();
					this._startDate = value;
					this.SendPropertyChanged("startDate");
					this.OnstartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_endDate", DbType="Date")]
		public System.Nullable<System.DateTime> endDate
		{
			get
			{
				return this._endDate;
			}
			set
			{
				if ((this._endDate != value))
				{
					this.OnendDateChanging(value);
					this.SendPropertyChanging();
					this._endDate = value;
					this.SendPropertyChanged("endDate");
					this.OnendDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_report", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string report
		{
			get
			{
				return this._report;
			}
			set
			{
				if ((this._report != value))
				{
					this.OnreportChanging(value);
					this.SendPropertyChanging();
					this._report = value;
					this.SendPropertyChanged("report");
					this.OnreportChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Project", Storage="_Team", ThisKey="teamId", OtherKey="teamId", IsForeignKey=true)]
		public Team Team
		{
			get
			{
				return this._Team.Entity;
			}
			set
			{
				Team previousValue = this._Team.Entity;
				if (((previousValue != value) 
							|| (this._Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team.Entity = null;
						previousValue.Projects.Remove(this);
					}
					this._Team.Entity = value;
					if ((value != null))
					{
						value.Projects.Add(this);
						this._teamId = value.teamId;
					}
					else
					{
						this._teamId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Team");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Team")]
	public partial class Team : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _teamId;
		
		private string _teamName;
		
		private string _status;
		
		private System.Nullable<System.DateTime> _nextBooking;
		
		private EntitySet<BA> _BAs;
		
		private EntitySet<QA> _QAs;
		
		private EntitySet<Dev> _Devs;
		
		private EntityRef<TeamPassword> _TeamPassword;
		
		private EntitySet<Project> _Projects;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnteamIdChanging(int value);
    partial void OnteamIdChanged();
    partial void OnteamNameChanging(string value);
    partial void OnteamNameChanged();
    partial void OnstatusChanging(string value);
    partial void OnstatusChanged();
    partial void OnnextBookingChanging(System.Nullable<System.DateTime> value);
    partial void OnnextBookingChanged();
    #endregion
		
		public Team()
		{
			this._BAs = new EntitySet<BA>(new Action<BA>(this.attach_BAs), new Action<BA>(this.detach_BAs));
			this._QAs = new EntitySet<QA>(new Action<QA>(this.attach_QAs), new Action<QA>(this.detach_QAs));
			this._Devs = new EntitySet<Dev>(new Action<Dev>(this.attach_Devs), new Action<Dev>(this.detach_Devs));
			this._TeamPassword = default(EntityRef<TeamPassword>);
			this._Projects = new EntitySet<Project>(new Action<Project>(this.attach_Projects), new Action<Project>(this.detach_Projects));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teamId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int teamId
		{
			get
			{
				return this._teamId;
			}
			set
			{
				if ((this._teamId != value))
				{
					this.OnteamIdChanging(value);
					this.SendPropertyChanging();
					this._teamId = value;
					this.SendPropertyChanged("teamId");
					this.OnteamIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teamName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string teamName
		{
			get
			{
				return this._teamName;
			}
			set
			{
				if ((this._teamName != value))
				{
					this.OnteamNameChanging(value);
					this.SendPropertyChanging();
					this._teamName = value;
					this.SendPropertyChanged("teamName");
					this.OnteamNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nextBooking", DbType="Date")]
		public System.Nullable<System.DateTime> nextBooking
		{
			get
			{
				return this._nextBooking;
			}
			set
			{
				if ((this._nextBooking != value))
				{
					this.OnnextBookingChanging(value);
					this.SendPropertyChanging();
					this._nextBooking = value;
					this.SendPropertyChanged("nextBooking");
					this.OnnextBookingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_BA", Storage="_BAs", ThisKey="teamId", OtherKey="teamId")]
		public EntitySet<BA> BAs
		{
			get
			{
				return this._BAs;
			}
			set
			{
				this._BAs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_QA", Storage="_QAs", ThisKey="teamId", OtherKey="teamId")]
		public EntitySet<QA> QAs
		{
			get
			{
				return this._QAs;
			}
			set
			{
				this._QAs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Dev", Storage="_Devs", ThisKey="teamId", OtherKey="teamId")]
		public EntitySet<Dev> Devs
		{
			get
			{
				return this._Devs;
			}
			set
			{
				this._Devs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_TeamPassword", Storage="_TeamPassword", ThisKey="teamId", OtherKey="teamId", IsUnique=true, IsForeignKey=false)]
		public TeamPassword TeamPassword
		{
			get
			{
				return this._TeamPassword.Entity;
			}
			set
			{
				TeamPassword previousValue = this._TeamPassword.Entity;
				if (((previousValue != value) 
							|| (this._TeamPassword.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TeamPassword.Entity = null;
						previousValue.Team = null;
					}
					this._TeamPassword.Entity = value;
					if ((value != null))
					{
						value.Team = this;
					}
					this.SendPropertyChanged("TeamPassword");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Project", Storage="_Projects", ThisKey="teamId", OtherKey="teamId")]
		public EntitySet<Project> Projects
		{
			get
			{
				return this._Projects;
			}
			set
			{
				this._Projects.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BAs(BA entity)
		{
			this.SendPropertyChanging();
			entity.Team = this;
		}
		
		private void detach_BAs(BA entity)
		{
			this.SendPropertyChanging();
			entity.Team = null;
		}
		
		private void attach_QAs(QA entity)
		{
			this.SendPropertyChanging();
			entity.Team = this;
		}
		
		private void detach_QAs(QA entity)
		{
			this.SendPropertyChanging();
			entity.Team = null;
		}
		
		private void attach_Devs(Dev entity)
		{
			this.SendPropertyChanging();
			entity.Team = this;
		}
		
		private void detach_Devs(Dev entity)
		{
			this.SendPropertyChanging();
			entity.Team = null;
		}
		
		private void attach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.Team = this;
		}
		
		private void detach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.Team = null;
		}
	}
	
	public partial class findCompletedResult
	{
		
		private int _projectId;
		
		private System.Nullable<int> _teamId;
		
		private string _projectName;
		
		private string _status;
		
		private string _startDate;
		
		private string _endDate;
		
		private string _report;
		
		public findCompletedResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_projectId", DbType="Int NOT NULL")]
		public int projectId
		{
			get
			{
				return this._projectId;
			}
			set
			{
				if ((this._projectId != value))
				{
					this._projectId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teamId", DbType="Int")]
		public System.Nullable<int> teamId
		{
			get
			{
				return this._teamId;
			}
			set
			{
				if ((this._teamId != value))
				{
					this._teamId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_projectName", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string projectName
		{
			get
			{
				return this._projectName;
			}
			set
			{
				if ((this._projectName != value))
				{
					this._projectName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="VarChar(30)")]
		public string status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this._status = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_startDate", DbType="VarChar(5000) NOT NULL", CanBeNull=false)]
		public string startDate
		{
			get
			{
				return this._startDate;
			}
			set
			{
				if ((this._startDate != value))
				{
					this._startDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_endDate", DbType="VarChar(5000) NOT NULL", CanBeNull=false)]
		public string endDate
		{
			get
			{
				return this._endDate;
			}
			set
			{
				if ((this._endDate != value))
				{
					this._endDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_report", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string report
		{
			get
			{
				return this._report;
			}
			set
			{
				if ((this._report != value))
				{
					this._report = value;
				}
			}
		}
	}
	
	public partial class findOngoingResult
	{
		
		private int _projectId;
		
		private System.Nullable<int> _teamId;
		
		private string _projectName;
		
		private string _status;
		
		private string _startDate;
		
		private string _endDate;
		
		private string _report;
		
		public findOngoingResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_projectId", DbType="Int NOT NULL")]
		public int projectId
		{
			get
			{
				return this._projectId;
			}
			set
			{
				if ((this._projectId != value))
				{
					this._projectId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teamId", DbType="Int")]
		public System.Nullable<int> teamId
		{
			get
			{
				return this._teamId;
			}
			set
			{
				if ((this._teamId != value))
				{
					this._teamId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_projectName", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string projectName
		{
			get
			{
				return this._projectName;
			}
			set
			{
				if ((this._projectName != value))
				{
					this._projectName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="VarChar(30)")]
		public string status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this._status = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_startDate", DbType="VarChar(5000) NOT NULL", CanBeNull=false)]
		public string startDate
		{
			get
			{
				return this._startDate;
			}
			set
			{
				if ((this._startDate != value))
				{
					this._startDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_endDate", DbType="VarChar(5000) NOT NULL", CanBeNull=false)]
		public string endDate
		{
			get
			{
				return this._endDate;
			}
			set
			{
				if ((this._endDate != value))
				{
					this._endDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_report", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string report
		{
			get
			{
				return this._report;
			}
			set
			{
				if ((this._report != value))
				{
					this._report = value;
				}
			}
		}
	}
	
	public partial class findPendingResult
	{
		
		private int _projectId;
		
		private System.Nullable<int> _teamId;
		
		private string _projectName;
		
		private string _status;
		
		private string _startDate;
		
		private string _endDate;
		
		private string _report;
		
		public findPendingResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_projectId", DbType="Int NOT NULL")]
		public int projectId
		{
			get
			{
				return this._projectId;
			}
			set
			{
				if ((this._projectId != value))
				{
					this._projectId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teamId", DbType="Int")]
		public System.Nullable<int> teamId
		{
			get
			{
				return this._teamId;
			}
			set
			{
				if ((this._teamId != value))
				{
					this._teamId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_projectName", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string projectName
		{
			get
			{
				return this._projectName;
			}
			set
			{
				if ((this._projectName != value))
				{
					this._projectName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="VarChar(30)")]
		public string status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this._status = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_startDate", DbType="VarChar(5000) NOT NULL", CanBeNull=false)]
		public string startDate
		{
			get
			{
				return this._startDate;
			}
			set
			{
				if ((this._startDate != value))
				{
					this._startDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_endDate", DbType="VarChar(5000) NOT NULL", CanBeNull=false)]
		public string endDate
		{
			get
			{
				return this._endDate;
			}
			set
			{
				if ((this._endDate != value))
				{
					this._endDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_report", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string report
		{
			get
			{
				return this._report;
			}
			set
			{
				if ((this._report != value))
				{
					this._report = value;
				}
			}
		}
	}
	
	public partial class CheckFreeTeamsResult
	{
		
		private int _teamId;
		
		public CheckFreeTeamsResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teamId", DbType="Int NOT NULL")]
		public int teamId
		{
			get
			{
				return this._teamId;
			}
			set
			{
				if ((this._teamId != value))
				{
					this._teamId = value;
				}
			}
		}
	}
	
	public partial class ViewAllTeamsResult
	{
		
		private int _teamId;
		
		private string _teamName;
		
		private string _status;
		
		private System.Nullable<System.DateTime> _nextBooking;
		
		public ViewAllTeamsResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teamId", DbType="Int NOT NULL")]
		public int teamId
		{
			get
			{
				return this._teamId;
			}
			set
			{
				if ((this._teamId != value))
				{
					this._teamId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teamName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string teamName
		{
			get
			{
				return this._teamName;
			}
			set
			{
				if ((this._teamName != value))
				{
					this._teamName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this._status = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nextBooking", DbType="Date")]
		public System.Nullable<System.DateTime> nextBooking
		{
			get
			{
				return this._nextBooking;
			}
			set
			{
				if ((this._nextBooking != value))
				{
					this._nextBooking = value;
				}
			}
		}
	}
	
	public partial class ViewAvailableTeamsResult
	{
		
		private int _teamId;
		
		private string _teamName;
		
		private string _status;
		
		private System.Nullable<System.DateTime> _nextBooking;
		
		public ViewAvailableTeamsResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teamId", DbType="Int NOT NULL")]
		public int teamId
		{
			get
			{
				return this._teamId;
			}
			set
			{
				if ((this._teamId != value))
				{
					this._teamId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teamName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string teamName
		{
			get
			{
				return this._teamName;
			}
			set
			{
				if ((this._teamName != value))
				{
					this._teamName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this._status = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nextBooking", DbType="Date")]
		public System.Nullable<System.DateTime> nextBooking
		{
			get
			{
				return this._nextBooking;
			}
			set
			{
				if ((this._nextBooking != value))
				{
					this._nextBooking = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
